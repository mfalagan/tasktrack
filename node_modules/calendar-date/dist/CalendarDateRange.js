"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CalendarDateRange = void 0;
const CalendarDate_1 = require("./CalendarDate");
class CalendarDateRange {
    constructor(start, end, autoArrange = false) {
        if (!autoArrange && end < start) {
            throw new Error("CalendarDateRange Validation Error: start date can't be before the end date.");
        }
        this.start = start <= end ? start : end;
        this.end = end > start ? end : start;
        Object.freeze(this);
    }
    equals(calendarDateRange) {
        return this.start.equals(calendarDateRange.start) && this.end.equals(calendarDateRange.end);
    }
    toString() {
        return `${this.start.toString()}/${this.end.toString()}`;
    }
    toJSON() {
        return this.toString();
    }
    /**
     * @param isoString pattern YYYY-MM-DD/YYYY-MM-DD
     */
    static parse(isoString) {
        const split = isoString.split('/');
        if (split.length !== 2) {
            throw new Error(`CalendarDateRange Validation Error: Input ${isoString.toString()} is not valid, it should follow the pattern YYYY-MM-DD/YYYY-MM-DD.`);
        }
        return new CalendarDateRange(new CalendarDate_1.CalendarDate(split[0]), new CalendarDate_1.CalendarDate(split[1]));
    }
    getDifferenceInDays() {
        return this.end.getDifferenceInDays(this.start);
    }
    /**
     * Returns the difference in months as an integer, ignoring the day values.
     */
    getDifferenceInMonths() {
        return (this.end.year - this.start.year) * 12 + (this.end.month - this.start.month);
    }
    includes(input, options) {
        if (input instanceof CalendarDateRange) {
            return this.includes(input.start, options) && this.includes(input.end, options);
        }
        return (((options === null || options === void 0 ? void 0 : options.excludeStart) ? input > this.start : input >= this.start) &&
            ((options === null || options === void 0 ? void 0 : options.excludeEnd) ? input < this.end : input <= this.end));
    }
}
exports.CalendarDateRange = CalendarDateRange;
